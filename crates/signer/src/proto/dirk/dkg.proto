syntax = "proto3";

package v1;

import "google/protobuf/empty.proto";
import "endpoint.proto";

option csharp_namespace = "Eth2Signer.v1";
option php_namespace = "Eth2Signer\\v1";
option go_package = "github.com/wealdtech/eth2-signer-api/pb/v1";
option java_package = "com.wealdtech.eth2signerapi.v1";
option java_multiple_files = true;
option java_outer_classname = "DKGProto";

// DKG is the internal protocol that runs between distributed key generators.
service DKG {
  rpc Prepare(PrepareRequest) returns (google.protobuf.Empty) { }
  rpc Execute(ExecuteRequest) returns (google.protobuf.Empty) { }
  rpc Commit(CommitRequest) returns (CommitResponse) { }
  rpc Abort(AbortRequest) returns (google.protobuf.Empty) { }
  rpc Contribute(ContributeRequest) returns (ContributeResponse) { }
}

message PrepareRequest {
  // account is the name of the account.
  string account = 1;
  // threshold is the number of participants required to generate a valid signature.
  uint32 threshold = 2;
  // participants contains the endpoints of all participants.
  repeated Endpoint participants = 3;
  // passphrase is the passphrase of the account.
  bytes passphrase = 4;
}

message ExecuteRequest {
  // account is the name of the account.
  string account = 1;
}

message CommitRequest {
  // account is the name of the account.
  string account = 1;
  // confirmation data is data used to generate the confirmation signature.
  bytes confirmation_data = 2;
}

message CommitResponse {
  // public_key is the key generated by the process.
  bytes public_key = 1;
  // confirmation_signature is the signature generated by the individual secret key.
  bytes confirmation_signature = 2;
}

message AbortRequest {
  // account is the name of the account.
  string account = 1;
}

// ContributeRequest is sent by each part to all other parties with a contribution.
message ContributeRequest {
  string account = 1;
  bytes secret = 2;
  repeated bytes verification_vector = 3;
}

// ContributeResponse receives the contribution from a participant.
message ContributeResponse {
  bytes secret = 1;
  repeated bytes verification_vector = 2;
}
