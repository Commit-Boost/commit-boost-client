use alloy::{
    primitives::{aliases::B32, Address, B256},
    rpc::types::beacon::{constants::BLS_DST_SIG, BlsPublicKey, BlsSignature},
};
use tree_hash::TreeHash;
use tree_hash_derive::TreeHash;

use crate::{
    constants::{COMMIT_BOOST_DOMAIN, GENESIS_VALIDATORS_ROOT},
    error::BlstErrorWrapper,
    signer::{verify_bls_signature, verify_ecdsa_signature, BlsSecretKey, EcdsaSignature},
    types::{self, Chain},
};

pub fn sign_message(secret_key: &BlsSecretKey, msg: &[u8]) -> BlsSignature {
    let signature = secret_key.sign(msg, BLS_DST_SIG, &[]).to_bytes();
    BlsSignature::from_slice(&signature)
}

pub fn compute_prop_commit_signing_root(
    chain: Chain,
    object_root: &B256,
    module_signing_id: Option<&B256>,
    domain_mask: &B32,
) -> B256 {
    let domain = compute_domain(chain, domain_mask);
    match module_signing_id {
        Some(id) => {
            let object_root =
                types::PropCommitSigningInfo { data: *object_root, module_signing_id: *id }
                    .tree_hash_root();
            types::SigningData { object_root, signing_domain: domain }.tree_hash_root()
        }
        None => types::SigningData { object_root: *object_root, signing_domain: domain }
            .tree_hash_root(),
    }
}

// NOTE: this currently works only for builder domain signatures and
// verifications
// ref: https://github.com/ralexstokes/ethereum-consensus/blob/cf3c404043230559660810bc0c9d6d5a8498d819/ethereum-consensus/src/builder/mod.rs#L26-L29
pub fn compute_domain(chain: Chain, domain_mask: &B32) -> B256 {
    #[derive(Debug, TreeHash)]
    struct ForkData {
        fork_version: [u8; 4],
        genesis_validators_root: [u8; 32],
    }

    let mut domain = [0u8; 32];
    domain[..4].copy_from_slice(&domain_mask.0);

    let fork_version = chain.genesis_fork_version();
    let fd = ForkData { fork_version, genesis_validators_root: GENESIS_VALIDATORS_ROOT };
    let fork_data_root = fd.tree_hash_root();

    domain[4..].copy_from_slice(&fork_data_root[..28]);

    B256::from(domain)
}

pub fn verify_signed_message<T: TreeHash>(
    chain: Chain,
    pubkey: &BlsPublicKey,
    msg: &T,
    signature: &BlsSignature,
    module_signing_id: Option<&B256>,
    domain_mask: &B32,
) -> Result<(), BlstErrorWrapper> {
    let signing_root = compute_prop_commit_signing_root(
        chain,
        &msg.tree_hash_root(),
        module_signing_id,
        domain_mask,
    );
    verify_bls_signature(pubkey, signing_root.as_slice(), signature)
}

/// Signs a message with the Beacon builder domain.
pub fn sign_builder_message(
    chain: Chain,
    secret_key: &BlsSecretKey,
    msg: &impl TreeHash,
) -> BlsSignature {
    sign_builder_root(chain, secret_key, &msg.tree_hash_root())
}

pub fn sign_builder_root(
    chain: Chain,
    secret_key: &BlsSecretKey,
    object_root: &B256,
) -> BlsSignature {
    let signing_domain = chain.builder_domain();
    let signing_data =
        types::SigningData { object_root: object_root.tree_hash_root(), signing_domain };
    let signing_root = signing_data.tree_hash_root();
    sign_message(secret_key, signing_root.as_slice())
}

pub fn sign_commit_boost_root(
    chain: Chain,
    secret_key: &BlsSecretKey,
    object_root: &B256,
    module_signing_id: Option<&B256>,
) -> BlsSignature {
    let signing_root = compute_prop_commit_signing_root(
        chain,
        object_root,
        module_signing_id,
        &B32::from(COMMIT_BOOST_DOMAIN),
    );
    sign_message(secret_key, signing_root.as_slice())
}

// ==============================
// === Signature Verification ===
// ==============================

/// Verifies that a proposer commitment signature was generated by the given BLS
/// key for the provided message, chain ID, and module signing ID.
pub fn verify_proposer_commitment_signature_bls(
    chain: Chain,
    pubkey: &BlsPublicKey,
    msg: &impl TreeHash,
    signature: &BlsSignature,
    module_signing_id: &B256,
) -> Result<(), BlstErrorWrapper> {
    let signing_domain = compute_domain(chain, &B32::from(COMMIT_BOOST_DOMAIN));
    let object_root = types::PropCommitSigningInfo {
        data: msg.tree_hash_root(),
        module_signing_id: *module_signing_id,
    }
    .tree_hash_root();
    let signing_root = types::SigningData { object_root, signing_domain }.tree_hash_root();
    verify_bls_signature(pubkey, signing_root.as_slice(), signature)
}

/// Verifies that a proposer commitment signature was generated by the given
/// ECDSA key for the provided message, chain ID, and module signing ID.
pub fn verify_proposer_commitment_signature_ecdsa(
    chain: Chain,
    address: &Address,
    msg: &impl TreeHash,
    signature: &EcdsaSignature,
    module_signing_id: &B256,
) -> Result<(), eyre::Report> {
    let object_root = msg.tree_hash_root();
    let signing_domain = compute_domain(chain, &B32::from(COMMIT_BOOST_DOMAIN));
    let object_root =
        types::PropCommitSigningInfo { data: object_root, module_signing_id: *module_signing_id }
            .tree_hash_root();
    let signing_root = types::SigningData { object_root, signing_domain }.tree_hash_root();
    verify_ecdsa_signature(address, &signing_root, signature)
}

// ===============
// === Testing ===
// ===============

#[cfg(test)]
mod tests {

    use alloy::primitives::aliases::B32;

    use super::compute_domain;
    use crate::{constants::APPLICATION_BUILDER_DOMAIN, types::Chain};

    #[test]
    fn test_builder_domains() {
        let domain = &B32::from(APPLICATION_BUILDER_DOMAIN);
        assert_eq!(compute_domain(Chain::Mainnet, domain), Chain::Mainnet.builder_domain());
        assert_eq!(compute_domain(Chain::Holesky, domain), Chain::Holesky.builder_domain());
        assert_eq!(compute_domain(Chain::Sepolia, domain), Chain::Sepolia.builder_domain());
        assert_eq!(compute_domain(Chain::Helder, domain), Chain::Helder.builder_domain());
        assert_eq!(compute_domain(Chain::Hoodi, domain), Chain::Hoodi.builder_domain());
    }
}
